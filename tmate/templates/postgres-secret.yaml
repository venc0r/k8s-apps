# store the secret-name as var
# in my case, the name was very long and containing a lot of fields
# so it helps me a lot
{{- $secret_name := printf "%s-db-postgres" (include "tmate.fullname" .) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "tmate.fullname" . }}-db-postgres
  labels:
    {{- include "tmate.labels" . | nindent 4 }}
    {{ include "tmate.postgres.selectorLabels" . | nindent 4 }}
data:
  # try to get the old secret
  # keep in mind, that a dry-run only returns an empty map 
  {{- $old_sec := lookup "v1" "Secret" .Release.Namespace $secret_name }}
  # check, if a secret is already set
  {{- if or (not $old_sec) (not $old_sec.data) }}
  # if not set, then generate a new password
  {{- $db_password := printf "%s" ( randAlphaNum 24 ) }}

  POSTGRES_DB: {{ .Values.postgres.configuration.dbName | b64enc }}
  POSTGRES_USER: {{ .Values.postgres.configuration.username | b64enc }}
  POSTGRES_PASSWORD: {{ .Values.postgres.configuration.password | b64enc }}
  PGDATA: {{ printf "/data/pgdata" | b64enc }}
  pg_uri: {{ printf "pg://%s:%s@tmate-db-postgres:5432/%s" .Values.postgres.configuration.username .Values.postgres.configuration.password .Values.postgres.configuration.dbName | b64enc }}

  {{ else }}
  # if set, then use the old value
  POSTGRES_DB: {{ index $old_sec.data "POSTGRES_DB" }}
  POSTGRES_USER: {{ index $old_sec.data "POSTGRES_USER" }}
  POSTGRES_PASSWORD: {{ index $old_sec.data "POSTGRES_PASSWORD" }}
  PGDATA: {{ index $old_sec.data "PGDATA" }}
  pg_uri: {{ index $old_sec.data "pg_uri" }}

  {{ end }}
